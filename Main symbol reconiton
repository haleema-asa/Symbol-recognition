#include <opencv2/opencv.hpp>
#include <iostream>

using namespace std;
using namespace cv;

int main() {

    // Load the original photo
    Mat original = imread("original_photo.png", IMREAD_GRAYSCALE);
    if (original.empty()) {
        cout << "Could not read the original photo" << endl;
        return -1;
    }

    // Create a named window for the original photo
    namedWindow("Original Photo", WINDOW_NORMAL);
    resizeWindow("Original Photo", 500, 500);
    imshow("Original Photo", original);

    // Create a named window for the transformed live image
    namedWindow("Transformed Live Image", WINDOW_NORMAL);
    resizeWindow("Transformed Live Image", 500, 500);

    // Initialize the video capture
    VideoCapture cap(0);
    if (!cap.isOpened()) {
        cout << "Could not open the camera" << endl;
        return -1;
    }

    // Start the video capture loop
    while (true) {

        // Capture a frame from the camera
        Mat frame;
        cap.read(frame);

        // Convert the frame to grayscale
        cvtColor(frame, frame, COLOR_BGR2GRAY);

        // Apply thresholding to the frame
        Mat thresh;
        threshold(frame, thresh, 128, 255, THRESH_BINARY);

        // Find contours in the frame
        vector<vector<Point>> contours;
        findContours(thresh, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);

        // Loop through each contour
        for (int i = 0; i < contours.size(); i++) {

            // Compute the bounding box of the contour
            Rect rect = boundingRect(contours[i]);

            // Draw the bounding box around the contour
            rectangle(frame, rect, Scalar(255), 2);

            // Extract the symbol from the bounding box
            Mat symbol = thresh(rect);

            // Resize the symbol to the same size as the original photo
            resize(symbol, symbol, Size(original.cols, original.rows));

            // Compute the difference between the symbol and the original photo
            Mat diff;
            absdiff(original, symbol, diff);

            // Compute the sum of pixel values in the difference image
            double sum = cv::sum(diff)[0];

            // If the sum is below a threshold, the symbol matches the original photo
            if (sum < 10000) {
                // Draw a green rectangle around the symbol
                rectangle(frame, rect, Scalar(0, 255, 0), 2);
            }
        }

        // Show the transformed live image
        imshow("Transformed Live Image", frame);

        // Check for user input to exit the program
        if (waitKey(1) == 27) {
            break;
        }
    }

    // Release the video capture
    cap.release();

    return 0;
}
